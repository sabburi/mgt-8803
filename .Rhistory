PageRank = function(A, s = 1, remove_dead_end = T, num_iteration = 10) {
n = nrow(A)
row_sum = apply(A, 1, sum)
# if remove dead ends
if (remove_dead_end) {
A[row_sum==0,] = 1 / n
}
# reset elements of row_sum that are 0 to 1, so that normalizing P to have row sum equal to 1 will go through
row_sum[row_sum==0] = 1
# normalize P to have row sum equal to 1
P = A / row_sum
# initialize PageRank score
w = rep(1, n) / n
# form P_hat
P_hat = s * P + (1-s)/n * matrix(1, nrow=n, ncol=n)
for (i in 1:num_iteration) {
cat("\nIteration", i, ':\n')
cat('w: ', t(w), '\n')
last_w = w
z = c(t(w) %*% P_hat)  # 1. apply the matrix transformation
if (remove_dead_end) {
w = z / sum(z)  # 2. convert to probability vector
} else {
w = z
}
cat('sum(z):', sum(z), '\n')
cat('sum(w):', sum(w), '\n')
# compute the difference of last_C and C
cat('||last_w - w||:', norm(last_w - w, type='2'), '\n')
}
return(w)
}
C <- c*g
c <- 0.1
C <- c*g
g <- matrix(c(0,0,1,1,
1,0,0,1,
0,1,0,0,
0,0,1,0),nrow=4,byrow=T)
C <- c*g
View(C)
c <- 0.1
C <- c*g
C_hat <-  matrix(c(.2,0,0,0,
0,.2,0,0,
0,0,.1,0,
0,0,0,.1),nrow=4,byrow=T)
A <- C_hat %*% solve(diag(4) - C)
View(A)
A <- round(A, 2)
View(A)
c <- 0.2
C <- c*g
View(C)
View(C)
c <- 0.2
C <- c*g
C_hat <-  matrix(c(.4,0,0,0,
0,.4,0,0,
0,0,.2,0,
0,0,0,.2),nrow=4,byrow=T)
A <- C_hat %*% solve(diag(4) - C)
A <- round(A, 2)
PageRank = function(A, s = 1, remove_dead_end = T, num_iteration = 10) {
n = nrow(A)
row_sum = apply(A, 1, sum)
# if remove dead ends
if (remove_dead_end) {
A[row_sum==0,] = 1 / n
}
# reset elements of row_sum that are 0 to 1, so that normalizing P to have row sum equal to 1 will go through
row_sum[row_sum==0] = 1
# normalize P to have row sum equal to 1
P = A / row_sum
# initialize PageRank score
w = rep(1, n) / n
# form P_hat
P_hat = s * P + (1-s)/n * matrix(1, nrow=n, ncol=n)
for (i in 1:num_iteration) {
cat("\nIteration", i, ':\n')
cat('w: ', t(w), '\n')
last_w = w
z = c(t(w) %*% P_hat)  # 1. apply the matrix transformation
if (remove_dead_end) {
w = z / sum(z)  # 2. convert to probability vector
} else {
w = z
}
cat('sum(z):', sum(z), '\n')
cat('sum(w):', sum(w), '\n')
# compute the difference of last_C and C
cat('||last_w - w||:', norm(last_w - w, type='2'), '\n')
}
return(w)
}
A = matrix(c(0,0,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,0,0,0,
0,1,0,1,0,1,0,0,0,0,0,
0,1,0,0,1,0,0,0,0,0,0,
0,1,0,0,1,0,0,0,0,0,0,
0,1,0,0,1,0,0,0,0,0,0,
0,1,0,0,1,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0), nrow=11, byrow=T)
o_0.80 <- PageRank(A, s = 0.8, remove_dead_end = T, num_iteration = 1000)
o_0.81 <- PageRank(A, s = 0.81, remove_dead_end = T, num_iteration = 1000)
o_0.82 <- PageRank(A, s = 0.82, remove_dead_end = T, num_iteration = 1000)
o_0.83 <- PageRank(A, s = 0.83, remove_dead_end = T, num_iteration = 1000)
g <- matrix(c(0,0,1,1,
1,0,0,1,
0,1,0,0,
0,0,1,0),nrow=4,byrow=T)
c <- 0.2
C <- c*g
C_hat <-  matrix(c(.4,0,0,0,
0,.4,0,0,
0,0,.2,0,
0,0,0,.2),nrow=4,byrow=T)
A <- C_hat %*% solve(diag(4) - C)
A <- round(A, 2)
A
p = matrix(c(0,
1,
1,
1)), nrow=4, byrow=T)
p = matrix(c(0,
1,
1,
1), nrow=4, byrow=T)
#scenario 1 =
1_bk <- A*p
#scenario 1 =
bk_1 <- A*p
p
#scenario 1 =
bk_1 <- A%*%p
bk_1
p_2 = matrix(c(1,
0,
1,
1), nrow=4, byrow=T)
#scenario 1 =
bk_2 <- A%*%p
bk_2
#scenario 2
p_2 = matrix(c(1,
0,
1,
1), nrow=4, byrow=T)
#scenario 1 =
bk_2 <- A%*%p
bk_2
#scenario 3
p_3 = matrix(c(1,
1,
0,
1), nrow=4, byrow=T)
bk_3 <- A%*%p
bk_3
#scenario 4
p_3 = matrix(c(1,
1,
1,
0), nrow=4, byrow=T)
bk_4 <- A%*%p
bk_4
c <- 0.1
C <- c*g
C_hat <-  matrix(c(.2,0,0,0,
0,.2,0,0,
0,0,.1,0,
0,0,0,.1),nrow=4,byrow=T)
A <- C_hat %*% solve(diag(4) - C)
A <- round(A, 2)
A
#scenario 1
p_1 = matrix(c(0,
1,
1,
1), nrow=4, byrow=T)
bk_1 <- A%*%p
bk_1
#scenario 2
p_2 = matrix(c(1,
0,
1,
1), nrow=4, byrow=T)
bk_2 <- A%*%p
bk_2
#scenario 3
p_3 = matrix(c(1,
1,
0,
1), nrow=4, byrow=T)
bk_3 <- A%*%p
bk_3
#scenario 4
p_3 = matrix(c(1,
1,
1,
0), nrow=4, byrow=T)
bk_4 <- A%*%p
bk_4
bk_2 <- A%*%p
bk_2
bk_2 <- A %*% p
bk_2
radiant::radiant()
radiant::radiant
install.packages("radiant")
LetterEdges = read.csv(file='data_edges.csv', sep=',')
LetterNodes = read.csv(file='data_nodes.csv', sep=',')
setwd("~/Google Drive/mgt-markets/mgt-8803/")
library(igraph)
LetterEdges = read.csv(file='data_edges.csv', sep=',')
LetterNodes = read.csv(file='data_nodes.csv', sep=',')
View(LetterEdges)
View(LetterNodes)
vcount(g.letter)
g.letter = graph.data.frame(LetterEdges,
directed="FALSE",
vertices=LetterNodes)
vcount(g.letter)
ecount(g.letter)
plot(g.letter, layout=layout.fruchterman.reingold, vertex.label=NA, vertex.size=1,
edge.arrow.size=0.1, edge.arrow.width=0.25)
plot(g.letter, layout=layout.fruchterman.reingold, vertex.label=LetterNodes, vertex.size=1,
edge.arrow.size=0.1, edge.arrow.width=0.25)
NA
plot(g.letter, layout=layout.fruchterman.reingold, vertex.label=NA, vertex.size=1,
edge.arrow.size=0.1, edge.arrow.width=0.25)
